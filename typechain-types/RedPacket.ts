/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  AddressLike,
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  EventFragment,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedLogDescription,
} from './common'

export interface RedPacketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'nextPacketId'
      | 'redPackets'
      | 'createRedPacket'
      | 'claimRedPacket'
      | 'getRedPacketInfo'
      | 'hasClaimedRedPacket'
      | 'getRedPacketAmounts',
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic: 'RedPacketClaimed' | 'RedPacketCreated',
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'nextPacketId',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'redPackets',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'createRedPacket',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'claimRedPacket',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getRedPacketInfo',
    values: [BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'hasClaimedRedPacket',
    values: [BigNumberish, AddressLike],
  ): string
  encodeFunctionData(
    functionFragment: 'getRedPacketAmounts',
    values: [BigNumberish],
  ): string

  decodeFunctionResult(
    functionFragment: 'nextPacketId',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'redPackets', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'createRedPacket',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'claimRedPacket',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRedPacketInfo',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'hasClaimedRedPacket',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRedPacketAmounts',
    data: BytesLike,
  ): Result
}

export namespace RedPacketClaimedEvent {
  export type InputTuple = [
    packetId: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish,
  ]
  export type OutputTuple = [packetId: bigint, claimer: string, amount: bigint]
  export interface OutputObject {
    packetId: bigint
    claimer: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace RedPacketCreatedEvent {
  export type InputTuple = [
    packetId: BigNumberish,
    creator: AddressLike,
    totalAmount: BigNumberish,
    packetCount: BigNumberish,
  ]
  export type OutputTuple = [
    packetId: bigint,
    creator: string,
    totalAmount: bigint,
    packetCount: bigint,
  ]
  export interface OutputObject {
    packetId: bigint
    creator: string
    totalAmount: bigint
    packetCount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface RedPacket extends BaseContract {
  connect(runner?: ContractRunner | null): RedPacket
  waitForDeployment(): Promise<this>

  interface: RedPacketInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>

  nextPacketId: TypedContractMethod<[], [bigint], 'view'>

  redPackets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        creator: string
        totalAmount: bigint
        remainingAmount: bigint
        remainingPackets: bigint
        createdAt: bigint
      },
    ],
    'view'
  >

  createRedPacket: TypedContractMethod<
    [packetCount: BigNumberish],
    [bigint],
    'payable'
  >

  claimRedPacket: TypedContractMethod<
    [packetId: BigNumberish],
    [void],
    'nonpayable'
  >

  getRedPacketInfo: TypedContractMethod<
    [packetId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, string[]] & {
        creator: string
        totalAmount: bigint
        remainingAmount: bigint
        remainingPackets: bigint
        createdAt: bigint
        claimers: string[]
      },
    ],
    'view'
  >

  hasClaimedRedPacket: TypedContractMethod<
    [packetId: BigNumberish, user: AddressLike],
    [boolean],
    'view'
  >

  getRedPacketAmounts: TypedContractMethod<
    [packetId: BigNumberish],
    [bigint[]],
    'view'
  >

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T

  getFunction(
    nameOrSignature: 'nextPacketId',
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'redPackets'): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        creator: string
        totalAmount: bigint
        remainingAmount: bigint
        remainingPackets: bigint
        createdAt: bigint
      },
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'createRedPacket',
  ): TypedContractMethod<[packetCount: BigNumberish], [bigint], 'payable'>
  getFunction(
    nameOrSignature: 'claimRedPacket',
  ): TypedContractMethod<[packetId: BigNumberish], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'getRedPacketInfo'): TypedContractMethod<
    [packetId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, string[]] & {
        creator: string
        totalAmount: bigint
        remainingAmount: bigint
        remainingPackets: bigint
        createdAt: bigint
        claimers: string[]
      },
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'hasClaimedRedPacket',
  ): TypedContractMethod<
    [packetId: BigNumberish, user: AddressLike],
    [boolean],
    'view'
  >
  getFunction(
    nameOrSignature: 'getRedPacketAmounts',
  ): TypedContractMethod<[packetId: BigNumberish], [bigint[]], 'view'>

  getEvent(
    key: 'RedPacketClaimed',
  ): TypedContractEvent<
    RedPacketClaimedEvent.InputTuple,
    RedPacketClaimedEvent.OutputTuple,
    RedPacketClaimedEvent.OutputObject
  >
  getEvent(
    key: 'RedPacketCreated',
  ): TypedContractEvent<
    RedPacketCreatedEvent.InputTuple,
    RedPacketCreatedEvent.OutputTuple,
    RedPacketCreatedEvent.OutputObject
  >

  filters: {
    'RedPacketClaimed(uint256,address,uint256)': TypedContractEvent<
      RedPacketClaimedEvent.InputTuple,
      RedPacketClaimedEvent.OutputTuple,
      RedPacketClaimedEvent.OutputObject
    >
    RedPacketClaimed: TypedContractEvent<
      RedPacketClaimedEvent.InputTuple,
      RedPacketClaimedEvent.OutputTuple,
      RedPacketClaimedEvent.OutputObject
    >

    'RedPacketCreated(uint256,address,uint256,uint256)': TypedContractEvent<
      RedPacketCreatedEvent.InputTuple,
      RedPacketCreatedEvent.OutputTuple,
      RedPacketCreatedEvent.OutputObject
    >
    RedPacketCreated: TypedContractEvent<
      RedPacketCreatedEvent.InputTuple,
      RedPacketCreatedEvent.OutputTuple,
      RedPacketCreatedEvent.OutputObject
    >
  }
}
